
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  id         String   @id @default(cuid())
  identifier String?
  userId     String?
  token      String   @unique
  expires    DateTime?   
  user User? @relation(fields: [userId], references: [id])
  @@unique([identifier, token])
}



model Product {
   id             Int   @id @default(autoincrement())
   name           String @unique
   slug           String
   description    String?
   category       String?
   image          String?
   inStock        Int? @default(0)
   salePrice      Int?  @default(0)
   price          Int?  @default(0)
   discount       Int?  @default(0)
   status         String @default("Active")
   coinValue      Int
   createdAt      DateTime  @default(now())  
}


model Redeem {
   id            Int   @id @default(autoincrement())
   name           String
   mobile         String
   email          String
   product        String
   productValue   String
   redeemCode     String    @unique
   redeemStatus   String    @default("Created")
   createdAt      DateTime  @default(now())  
   receivedAt     DateTime? 
}

model Coin {
   id            Int   @id @default(autoincrement())
   name          String
   mobile        String
   email         String?
   orderNumber   String?
   earnedCoin    Int @default(0)
   spentCoin     Int @default(0)
   createdAt     DateTime  @default(now()) 
}


model User {
  id            String    @id @default(cuid())
  name          String
  email         String   
  mobile        String @unique
  emailVerified DateTime?
  password      String? 
  address       String?
  city          String?
  state         String? 
  image         String?
  userType      String?  
  userStatus    String?
  fcmToken      String?
  createdAt     DateTime  @default(now())
  
  accounts      Account[]
  sessions      Session[]
  verificationTokens    VerificationToken[]
}
